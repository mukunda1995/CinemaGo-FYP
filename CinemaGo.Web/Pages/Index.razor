@page "/"
@using CinemaGo.DataModels.CustomModels;
@using CinemaGo.Web.Services;
@inject IUserPanelService userPanelService;
@inject ProtectedSessionStorage sessionStorage;
@inject NavigationManager navManager;

<style>
    .column {
        float: left;
        padding: 15px;
    }

    .clearfix::after {
        content: "";
        clear: both;
        display: table;
    }

    .menu {
        width: 25%;
        margin-top: 10px;
        border: 1px outset #808080;
        border-radius: 7px;
        background: linear-gradient(-10deg, #ffd800, #808080, #23a6d5, #f5f542);
        color: black;
    }

    .content {
        width: 75%;
    }

    .menu ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    .menu li {
        padding: 8px;
        margin-bottom: 8px;
        background-color: white;
        color: black;
    }

        .menu li:hover {
            background-color: #e7e4e4;
            color: #808080;
        }

    .stuff {
        padding: 8px;
        margin: 1px;
        background-color: white;
        border: 1px outset black;
    }

    .add-to-cart {
        width: 100%;
        border: 1px outset #808080;
        background-color: #b6ff00;
    }
</style>
@*<CinemaGo.Web.Components.SeatType />*@


<!--TESTING-->
@*<div class="form-group">
    <label for="City" class="control-label">City </label>
    <input for="City" class="form-control" @bind="@userSearch" />
</div>
<h1>@userSearch</h1>*@


    @*<div class="card-body">
        @if (productList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <ul class="list-unstyled">
                @foreach (var (index, prod) in productList.Select((prod, i) => (i + 1, prod)))
                {
                    if (@userSearch == @prod.Name)
                    {
                        <li class="media my-3">
                            <div class="container mt-5 ">
                                <form class=" row g-3 ">
                                    <div class=" col-md-3">
                                        <div class="media-img-wrapper mr-3">

                                            <img class="media-img" src="http://localhost:36313/@prod.ImageUrl" alt="@prod.Name" />

                                        </div>
                                    </div>
                                    <div class=" col-md-9">
                                        <div class="media-body align-content-start ">
                                            <b>Title </b>
                                            <br>
                                            @prod.Name
                                            <br>
                                            <b>Description </b>
                                            <br>
                                            @prod.Description
                                            <br>
                                            <b>Release Date </b>
                                            <br>
                                            @prod.ReleaseDate
                                            <br>
                                            <b>Language </b>
                                            <br>
                                            @prod.Language
                                            <br>
                                            <b>Running Time </b>
                                            <br>
                                            @prod.RunningTime
                                            <br>
                                            <p><a href="@prod.TrailerUrl" class="link-info link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">[Trailer]</a></p>
                                        </div>
                                    </div>

                                    <div>
                                        <a href="/mycart" @onclick="(() => AddToCart_Click(prod))">
                                            <br />
                                            <span style="font-size:30px; vertical-align:central; padding:7px; color:black; border-radius:100%; padding-top:10px;font-weight:bold; border:solid"><sup>Book Now</sup></span>
                                        </a>

                                    </div>

                                </form>
                            </div>
                        </li>
                    }
                }
            </ul>
        }
    </div>*@
    <img src="./images/homelogo.png" class="img-fluid" style="width:100%; height:200px" />
    <CinemaGo.Web.Components.DisplayAllContent />



<!--TESTING-->
@*<div style="min-height:500px;">

    <div class="column menu">
        @if (categories == null)
        {
            <span>loading...</span>
        }
        else
        { <div style="text-align:center;"><h5>Shopping List</h5></div>
            <ul>
                @foreach (var category in categories)
                {
                    <li style="cursor:pointer;" @onclick="(() => LoadProductByCategory(category))">@category.Name</li>
                }
            </ul>
        }
    </div>

    <div class="column content">
        @if (products == null)
        {
            <span>Loading...</span>
        }
        else
        {
            <div class="container">
                <div style="padding:5px 0px 0px 0px; border-bottom:1px ridge black; margin-bottom:5px;">
                    <h5><i><u>@categoryName</u></i></h5>
                </div>
                <div class="row">
                    @foreach (var prod in products)
                    {
                        <div class="col-md-4">
                            <div class="col-md-12 stuff">
                                <div style="width:100%;border-radius:2px;background-color:white;">
                                    <button type="button" class="btn" style="border:2px #cff7f9 inset;width: 100%;">@prod.Name</button>
                                    <img src="http://localhost:36313/@prod.ImageUrl" style="width: 100%; height:150px; border-radius: 1px; ">

                                    <div>
                                        Price:&nbsp; $@prod.Price &nbsp; &nbsp; <span style="color: red;"> Stock:&nbsp;@prod.Stock</span>
                                    </div>
                                    @if (@prod.CartFlag)
                                    {
                                        <button type="button" class="btn add-to-cart" style="background-color: #ffd800;" @onclick="(() => AddToCart_Click(prod))">Remove From Cart</button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn add-to-cart" @onclick="(() => AddToCart_Click(prod))">Add to Cart</button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>*@
@*</div>*@

@code {
    public List<CategoryModel> categories { get; set; }
    public List<ProductModel> products { get; set; }
    public string categoryName = string.Empty;
    public bool cartFlag = false;
    public List<CartModel> myCart { get; set; }
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public string userSearch = " ";
    [Parameter]
    public string Name { get; set; }
    [CascadingParameter]
    public ProductModel productModel { get; set; }
    public List<ProductModel> productList { get; set; }
    public int prodSelected;



    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetProducts();
    }

    private async Task GetProducts()
    {
        productList = await userPanelService.GetProducts();
    }

    private async Task GetCatgories()
    {
        categories = await userPanelService.GetCategories();
        if (categories != null && categories.Count > 0)
        {
            await LoadProductByCategory(categories.FirstOrDefault());
        }


    }

    private async Task LoadProductByCategory(CategoryModel category)
    {
        categoryName = category.Name;
        products = await userPanelService.GetProductByCategoryId(category.Id);
        if (products != null && products.Count > 0)
        {
            await updateCartText();
        }

    }


    private async Task AddToCart_Click(ProductModel productClicked)
    {
        cartFlag = true;

        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");

        if (!result.Success)
        {
            myCart = new List<CartModel>();

            if (productClicked.CartFlag)
            {
                var existing_product = myCart.Where(x => x.ProductId == productClicked.Id).FirstOrDefault();
                if (existing_product != null)
                {
                    myCart.Remove(existing_product);
                    await sessionStorage.SetAsync("myCart", myCart);
                }
            }
            else
            {

                CartModel cm = new CartModel();

                cm.ProductId = productClicked.Id;

                cm.Quantity = 1;
                cm.AvailableStock = Convert.ToInt32(productClicked.Stock);

                cm.ProductName = productClicked.Name;

                cm.ProductImage = productClicked.ImageUrl;

                cm.Price = Convert.ToInt32(productClicked.Price);

                myCart.Add(cm);

                await sessionStorage.SetAsync("myCart", myCart);
            }
        }
        else
        {
            myCart = result.Value;
            if (productClicked.CartFlag)
            {
                var existing_product = myCart.Where(x => x.ProductId == productClicked.Id).FirstOrDefault();
                if (existing_product != null)
                {
                    myCart.Remove(existing_product);
                    await sessionStorage.SetAsync("myCart", myCart);
                }
            }
            else
            {

                CartModel cm = new CartModel();

                cm.ProductId = productClicked.Id;

                cm.Quantity = 1;
                cm.AvailableStock = Convert.ToInt32(productClicked.Stock);

                cm.ProductName = productClicked.Name;

                cm.ProductImage = productClicked.ImageUrl;

                cm.Price = Convert.ToInt32(productClicked.Price);

                myCart.Add(cm);

                await sessionStorage.SetAsync("myCart", myCart);
            }

            await updateCartText();
        }

        await updateCartText();
        await notify.InvokeAsync();
    }

    private async Task updateCartText()
    {
        if (cartFlag)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");

            if (result.Success)
            {
                foreach (var _product in products)
                {
                    _product.CartFlag = false;
                }

                myCart = result.Value;
                foreach (var cart in myCart)
                {
                    var cartProd = products.Where(x => x.Id == cart.ProductId).FirstOrDefault();

                    if (cartProd != null)
                    {
                        cartProd.CartFlag = true;
                    }
                }
            }

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
            if (result.Success)
            {
                cartFlag = true;
            }
        }
    }
}