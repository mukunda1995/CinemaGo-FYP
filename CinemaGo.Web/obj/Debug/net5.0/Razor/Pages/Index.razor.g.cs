#pragma checksum "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1872486f3fbe8b1bd3dc2c7e74f0871bdfbd4523"
// <auto-generated/>
#pragma warning disable 1591
namespace CinemaGo.Web.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using CinemaGo.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using CinemaGo.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\Index.razor"
using CinemaGo.DataModels.CustomModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\Index.razor"
using CinemaGo.Web.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, @"<style>
    .column {
        float: left;
        padding: 15px;
    }

    .clearfix::after {
        content: """";
        clear: both;
        display: table;
    }

    .menu {
        width: 25%;
        margin-top: 10px;
        border: 1px outset #808080;
        border-radius: 7px;
        background: linear-gradient(-10deg, #ffd800, #808080, #23a6d5, #f5f542);
        color: black;
    }

    .content {
        width: 75%;
    }

    .menu ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    .menu li {
        padding: 8px;
        margin-bottom: 8px;
        background-color: white;
        color: black;
    }

        .menu li:hover {
            background-color: #e7e4e4;
            color: #808080;
        }

    .stuff {
        padding: 8px;
        margin: 1px;
        background-color: white;
        border: 1px outset black;
    }

    .add-to-cart {
        width: 100%;
        border: 1px outset #808080;
        background-color: #b6ff00;
    }
</style>





    <img src=""./images/homelogo.png"" class=""img-fluid"" style=""width:100%; height:200px"">
    ");
            __builder.OpenComponent<CinemaGo.Web.Components.DisplayAllContent>(1);
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 204 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\Index.razor"
       
    public List<CategoryModel> categories { get; set; }
    public List<ProductModel> products { get; set; }
    public string categoryName = string.Empty;
    public bool cartFlag = false;
    public List<CartModel> myCart { get; set; }
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public string userSearch = " ";
    [Parameter]
    public string Name { get; set; }
    [CascadingParameter]
    public ProductModel productModel { get; set; }
    public List<ProductModel> productList { get; set; }
    public int prodSelected;



    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetProducts();
    }

    private async Task GetProducts()
    {
        productList = await userPanelService.GetProducts();
    }

    private async Task GetCatgories()
    {
        categories = await userPanelService.GetCategories();
        if (categories != null && categories.Count > 0)
        {
            await LoadProductByCategory(categories.FirstOrDefault());
        }


    }

    private async Task LoadProductByCategory(CategoryModel category)
    {
        categoryName = category.Name;
        products = await userPanelService.GetProductByCategoryId(category.Id);
        if (products != null && products.Count > 0)
        {
            await updateCartText();
        }

    }


    private async Task AddToCart_Click(ProductModel productClicked)
    {
        cartFlag = true;

        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");

        if (!result.Success)
        {
            myCart = new List<CartModel>();

            if (productClicked.CartFlag)
            {
                var existing_product = myCart.Where(x => x.ProductId == productClicked.Id).FirstOrDefault();
                if (existing_product != null)
                {
                    myCart.Remove(existing_product);
                    await sessionStorage.SetAsync("myCart", myCart);
                }
            }
            else
            {

                CartModel cm = new CartModel();

                cm.ProductId = productClicked.Id;

                cm.Quantity = 1;
                cm.AvailableStock = Convert.ToInt32(productClicked.Stock);

                cm.ProductName = productClicked.Name;

                cm.ProductImage = productClicked.ImageUrl;

                cm.Price = Convert.ToInt32(productClicked.Price);

                myCart.Add(cm);

                await sessionStorage.SetAsync("myCart", myCart);
            }
        }
        else
        {
            myCart = result.Value;
            if (productClicked.CartFlag)
            {
                var existing_product = myCart.Where(x => x.ProductId == productClicked.Id).FirstOrDefault();
                if (existing_product != null)
                {
                    myCart.Remove(existing_product);
                    await sessionStorage.SetAsync("myCart", myCart);
                }
            }
            else
            {

                CartModel cm = new CartModel();

                cm.ProductId = productClicked.Id;

                cm.Quantity = 1;
                cm.AvailableStock = Convert.ToInt32(productClicked.Stock);

                cm.ProductName = productClicked.Name;

                cm.ProductImage = productClicked.ImageUrl;

                cm.Price = Convert.ToInt32(productClicked.Price);

                myCart.Add(cm);

                await sessionStorage.SetAsync("myCart", myCart);
            }

            await updateCartText();
        }

        await updateCartText();
        await notify.InvokeAsync();
    }

    private async Task updateCartText()
    {
        if (cartFlag)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");

            if (result.Success)
            {
                foreach (var _product in products)
                {
                    _product.CartFlag = false;
                }

                myCart = result.Value;
                foreach (var cart in myCart)
                {
                    var cartProd = products.Where(x => x.Id == cart.ProductId).FirstOrDefault();

                    if (cartProd != null)
                    {
                        cartProd.CartFlag = true;
                    }
                }
            }

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
            if (result.Success)
            {
                cartFlag = true;
            }
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedSessionStorage sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserPanelService userPanelService { get; set; }
    }
}
#pragma warning restore 1591
