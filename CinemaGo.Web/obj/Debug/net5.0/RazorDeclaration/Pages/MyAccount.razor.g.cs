// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CinemaGo.Web.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using CinemaGo.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using CinemaGo.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\MyAccount.razor"
using CinemaGo.DataModels.CustomModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\MyAccount.razor"
using CinemaGo.DataModels.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\MyAccount.razor"
using CinemaGo.Web.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/myaccount")]
    public partial class MyAccount : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 313 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\MyAccount.razor"
       

    private string headerText = "MyAccount";
    private int userKey = 0;
    private string userName = string.Empty;
    private string userEmail = string.Empty;
    private string alertMessage = string.Empty;
    private bool myAccountFlag = true;
    private bool changePasswordFlag = false;
    private bool orderHistoryFlag = false;
    public bool showTrackOrder = false;
    public bool showOrderDetail = false;
    public bool showAlertMessage = false;
    private List<ProductModel> products;
    private List<CustomerOrder> customerOrders;
    private PasswordModel passwordModel;
    private ResponseModel response;


    public List<string> shippingUpdates { get; set; }
    public List<CartModel> myCart { get; set; }
    public string shippingAddress { get; set; }
    public int shippingCharges { get; set; }
    public int subTotal { get; set; }
    public string paymentMode { get; set; }
    public int finalTotal { get; set; }

    protected override Task OnInitializedAsync()
    {
        products = new List<ProductModel>();
        customerOrders = new List<CustomerOrder>();
        passwordModel = new PasswordModel();
        return base.OnInitializedAsync();
    }

    private async Task ChangeActiveMenu(string menu)
    {
        headerText = menu;
        switch (menu)
        {
            case "MyAccount":
                myAccountFlag = true;
                changePasswordFlag = false;
                orderHistoryFlag = false;

                break;

            case "ChangePassword":
                myAccountFlag = false;
                changePasswordFlag = true;
                orderHistoryFlag = false;

                break;

            case "OrderHistory":
                myAccountFlag = false;
                changePasswordFlag = false;
                orderHistoryFlag = true;
                await GetOrdersByCustomerId(userKey);


                break;
        }
    }

    private async Task GetOrdersByCustomerId(int customerId)
    {
        if (customerOrders.Count == 0)
        {
            customerOrders = await userPanelService.GetOrdersByCustomerId(customerId);
        }
    }

    private void ToggleAlertMessage()
    {
        showAlertMessage = showAlertMessage == true ? false : true;
    }

    private void ToggleOrderDetailPopup()
    {
        showOrderDetail = showOrderDetail == true ? false : true;
    }

    private void ToggleTrackOrderPopup()
    {
        showTrackOrder = showTrackOrder == true ? false :true ;
    }

    private  async Task GetOrderDetailForCustomer(int customerId, string order_number)
    {
        myCart = await userPanelService.GetOrderDetailForCustomer(customerId, order_number);

        if(myCart != null && myCart.Count > 0)
        {
            shippingAddress =myCart.FirstOrDefault().ShippingAddress;
            shippingCharges= myCart.FirstOrDefault().ShippingCharges;
            subTotal = myCart.FirstOrDefault().SubTotal;
            finalTotal = myCart.FirstOrDefault().Total;
            paymentMode = myCart.FirstOrDefault().PaymentMode;
        }
    }

    private async Task Detail_Click(string order_number)
    {
        await GetOrderDetailForCustomer(userKey, order_number);
        ToggleOrderDetailPopup();
    }

    private async Task Track_Click(string order_number)
    {
        shippingUpdates = await userPanelService.GetShippingStatusForOrder(order_number);
        ToggleTrackOrderPopup();
    }

    private async Task ChangePassword_Click()
    {
        if (passwordModel.Password != passwordModel.ConfirmPassword)
        {
            alertMessage = "Password & Confirm password are not same";
            ToggleAlertMessage();
        }
        else
        {
            passwordModel.UserKey= userKey;

            response = await userPanelService.ChangePassword(passwordModel);
            if (response.Status)
            {
                passwordModel = new PasswordModel();
                alertMessage = response.Message;
                ToggleAlertMessage();
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var session_userKey = await sessionStorage.GetAsync<string>("userKey");

            var session_userName = await sessionStorage.GetAsync<string>("userName");

            var session_userEmail = await sessionStorage.GetAsync<string>("userEmail");

            if (session_userName.Success && session_userEmail.Success && session_userKey.Success)
            {
                userKey = Convert.ToInt32(session_userKey.Value);
                userName = session_userName.Value;
                userEmail = session_userEmail.Value;
            }
            var session_latestOrder = await sessionStorage.GetAsync<string>("latestOrder");
            if (session_latestOrder.Success)
            {
                await sessionStorage.DeleteAsync("latestOrder");

                await GetOrdersByCustomerId(userKey);

                await ChangeActiveMenu("OrderHistory");
            }

            StateHasChanged();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedSessionStorage sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserPanelService userPanelService { get; set; }
    }
}
#pragma warning restore 1591
