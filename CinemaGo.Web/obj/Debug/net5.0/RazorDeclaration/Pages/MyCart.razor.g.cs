// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CinemaGo.Web.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using CinemaGo.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using CinemaGo.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\MyCart.razor"
using CinemaGo.DataModels.CustomModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\MyCart.razor"
using CinemaGo.Web.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/mycart")]
    public partial class MyCart : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 239 "C:\Users\mukunda\Desktop\New folder\CinemaGo\CinemaGo.Web\Pages\MyCart.razor"
       

    [CascadingParameter]
    public EventCallback notify { get; set; }

    public List<CartModel> myCart { get; set; }
    public string shippingAddress { get; set; }
    public string paymentMode { get; set; }
    public int subTotal { get; set; }
    public int shippingCharges { get; set; }
    public int finalTotal { get; set; }
    public string userName { get; set; }
    public string userEmail { get; set; }
    public bool IsUserLoggedIn = false;

    public string Stripecard_Number { get; set; }
    public int Stripeexp_Month { get; set; }
    public int Stripeexp_Year { get; set; }
    public string Stripe_Cvc { get; set; }

    PaymentModeModel paymentModel = new PaymentModeModel()
    {
        Name = "CashOnDelivery"// default value
    };

    List<string> rdOptions = new List<string> { "CashOnDelivery", "PayPal", "Stripe" };
    protected override Task OnInitializedAsync()
    {
        shippingCharges = 100;
        subTotal = 0;
        paymentMode = "CashOnDelivery";
        return base.OnInitializedAsync();
    }

    private async Task RemoveFromCart_Click(CartModel cartItem)
    {
        myCart.Remove(cartItem);

        await sessionStorage.SetAsync("myCart", myCart);

        onQuantityChange();

        await notify.InvokeAsync();
    }

    private void onQuantityChange()
    {
        finalTotal = 0;

        subTotal = 0;

        foreach (var cart_item in myCart)
        {
            subTotal = subTotal + (cart_item.Price * cart_item.Quantity);
        }
        finalTotal = subTotal + shippingCharges;
    }

    private async Task Checkout_Click()
    {
        if(myCart != null && myCart.Count > 0)
        {
            myCart.FirstOrDefault().ShippingAddress =shippingAddress;
            myCart.FirstOrDefault().ShippingCharges =shippingCharges;
            myCart.FirstOrDefault().SubTotal=subTotal;
            myCart.FirstOrDefault().PaymentMode= paymentMode;

            if (paymentModel.Name == "PayPal")
            {
                myCart.FirstOrDefault().PayPalPayment = finalTotal;
                myCart.FirstOrDefault().PaymentMode = paymentModel.Name;
            }
            if (paymentModel.Name == "Stripe")
            {
                myCart.FirstOrDefault().Stripecard_Number= Stripecard_Number; 
                
                myCart.FirstOrDefault().Stripeexp_Month = Stripeexp_Month;

                myCart.FirstOrDefault().Stripeexp_Year= Stripeexp_Year;

                myCart.FirstOrDefault().Stripe_Cvc = Stripe_Cvc; 
                
                myCart.FirstOrDefault().Stripe_Value= finalTotal;

                myCart.FirstOrDefault().PaymentMode =paymentModel.Name;
            }

            var session_userKey = await sessionStorage.GetAsync<string>("userKey");
            if (session_userKey.Success)
            {
                myCart.FirstOrDefault().UserId = Convert.ToInt32(session_userKey.Value);
            }
            await sessionStorage.SetAsync("myCart", myCart);

            IsUserLoggedIn = await userPanelService.IsUserLoggedIn();
            if (IsUserLoggedIn)
            {
                var response = await userPanelService.Checkout(myCart);
                if (response != null)
                {
                    myCart.Clear();

                    await sessionStorage.SetAsync("myCart", myCart);

                    await sessionStorage.SetAsync("latestOrder", response.Message);
                    await notify.InvokeAsync();

                    navManager.NavigateTo("myaccount");
                }
            }
            else
            {
                await sessionStorage.SetAsync("checkoutAlert", "** Note : Login / Register  to  place your order !!");
                navManager.NavigateTo("login");
            }
        }

    }

    private async Task Clear_Click()
    {
        myCart = new List<CartModel>();
        await sessionStorage.DeleteAsync("myCart");
        await notify.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
            if (result.Success)
            {
                myCart = result.Value;

                foreach (var cart_item in myCart)
                {
                    subTotal = subTotal + (cart_item.Price * cart_item.Quantity);
                }

                if (myCart != null && myCart.Count > 0)
                {
                    shippingAddress = myCart.FirstOrDefault().ShippingAddress;
                }
            }

            finalTotal = subTotal + shippingCharges;

            var session_userName = await sessionStorage.GetAsync<string>("userName");

            var session_userEmail = await sessionStorage.GetAsync<string>("userEmail");

            if (session_userName.Success && session_userEmail.Success)
            {
                userName = session_userName.Value;

                userEmail = session_userEmail.Value;
            }
            StateHasChanged();
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserPanelService userPanelService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedSessionStorage sessionStorage { get; set; }
    }
}
#pragma warning restore 1591
